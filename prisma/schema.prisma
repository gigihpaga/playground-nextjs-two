// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider  = "sqlite"
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model dev_collection {
  id       Int        @id @default(autoincrement())
  name     String
  userId   String
  color    String
  createAt DateTime   @default(now())
  tasks    dev_task[]

  @@unique([name, userId])
}

model dev_task {
  id        Int       @id @default(autoincrement())
  content   String
  userId    String
  done      Boolean   @default(false)
  expiresAt DateTime?
  createAt  DateTime  @default(now())

  collectionId Int
  collection   dev_collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String?                @unique
  emailVerified     DateTime?
  password          String?
  role              String                 @default("USER") // USER,
  image             String?
  isTwoFactorEnable Boolean                @default(false)
  twoFactorToken    TwoFactorConfirmation?
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  identifier String?
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String // plih salah satu: @unique atau @@unique([userId])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// src/app/dev/tutorial/code-bucks/bloging
model BlogView {
  id          String   @id @default(cuid())
  idBlog      String   @unique
  slug        String
  counterView Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
